// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id        String   @id
  username  String   @unique
  name      String
  surname   String
  email     String?
  phone     String?
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime @default(now())
  parentId  String
  parent    Parent   @relation(fields: [parentId], references: [id])
  Class     Class    @relation(fields: [classId], references: [id])
  classId   Int
  Grade     Grade?   @relation(fields: [gradeId], references: [id])
  gradeId   Int?
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?
  phone     String?
  address   String
  img       String?
  bloodType String
  sex       UserSex
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?
  phone     String?
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    String    @unique
  students Student[]
  classes  Class[]
}

model Class {
  id       Int    @id @default(autoincrement())
  name     String @unique
  capacity Int

  lessons   Lesson[]
  teacher   Teacher   @relation(fields: [teacherId], references: [id])
  teacherId String
  students  Student[]
  Grade     Grade?    @relation(fields: [gradeId], references: [id])
  gradeId   Int?
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  teachers Teacher[]
  lesson   Lesson[]
}

model Lesson {
  id          Int          @id @default(autoincrement())
  name        String
  day         Day
  startTime   DateTime
  endTime     DateTime
  Subject     Subject      @relation(fields: [subjectId], references: [id])
  subjectId   Int
  Class       Class        @relation(fields: [classId], references: [id])
  classId     Int
  Teacher     Teacher      @relation(fields: [teacherId], references: [id])
  teacherId   String
  exams       Exam[]
  assignments Assignment[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  Lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  lessonId  Int?
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  Lesson    Lesson?  @relation(fields: [lessonId], references: [id])
  lessonId  Int?
  results   Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int
  Exam         Exam?       @relation(fields: [examId], references: [id])
  examId       Int?
  Assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  assignmentId Int?
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean
}

// model Event{}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
